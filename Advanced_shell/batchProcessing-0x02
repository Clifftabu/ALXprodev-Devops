#!/bin/bash
# Enhanced Batch Processing Script - Task 2 with Task 4 improvements
# This script fetches data for multiple Pokemon with robust error handling and retry logic
# Handles rate limiting, network issues, and implements retry mechanism

# Pokemon API base URL
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"

# List of Pokemon to fetch (as specified in requirements)
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Output directory
OUTPUT_DIR="pokemon_data"

# Delay between requests (in seconds) to handle rate limiting
REQUEST_DELAY=1

# Retry configuration
MAX_RETRIES=3
RETRY_DELAY=2  # seconds to wait between retry attempts

# Error log file
ERROR_LOG="batch_errors.log"

# Success log file
SUCCESS_LOG="batch_success.log"

# Function to log errors with timestamp
log_error() {
    local pokemon_name="$1"
    local error_message="$2"
    local attempt="$3"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] ERROR - $pokemon_name (Attempt $attempt): $error_message" >> "$ERROR_LOG"
}

# Function to log successful operations
log_success() {
    local pokemon_name="$1"
    local attempt="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] SUCCESS - $pokemon_name (Attempt $attempt): Data retrieved successfully" >> "$SUCCESS_LOG"
}

# Function to check prerequisites
check_prerequisites() {
    echo "üîç Checking prerequisites..."
    
    # Check if curl is installed
    if ! command -v curl &> /dev/null; then
        echo "‚ùå Error: curl is not installed. Please install curl first."
        echo "   Install with: sudo apt-get install curl"
        exit 1
    fi
    
    # Check if jq is installed (for JSON validation)
    if ! command -v jq &> /dev/null; then
        echo "‚ö†Ô∏è  Warning: jq is not installed. JSON validation will be skipped."
        echo "   Install jq for better JSON handling: sudo apt-get install jq"
    fi
    
    echo "‚úÖ Prerequisites check completed"
}

# Function to create output directory
setup_output_directory() {
    if [ ! -d "$OUTPUT_DIR" ]; then
        mkdir -p "$OUTPUT_DIR"
        echo "üìÅ Created output directory: $OUTPUT_DIR"
    else
        echo "üìÅ Using existing output directory: $OUTPUT_DIR"
    fi
}

# Function to validate network connectivity
check_network_connectivity() {
    echo "üåê Checking network connectivity..."
    
    # Try to ping a reliable server
    if ping -c 1 -W 5 8.8.8.8 >/dev/null 2>&1; then
        echo "‚úÖ Network connectivity confirmed"
        return 0
    else
        echo "‚ö†Ô∏è  Warning: Network connectivity issues detected"
        echo "   This may cause API requests to fail"
        return 1
    fi
}

# Function to validate Pokemon name format
validate_pokemon_name() {
    local pokemon_name="$1"
    
    # Check if name contains only valid characters (letters, numbers, hyphens)
    if [[ "$pokemon_name" =~ ^[a-zA-Z0-9-]+$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to make a single API request attempt
make_single_request() {
    local pokemon_name="$1"
    local output_file="$2"
    local api_url="$API_BASE_URL/$pokemon_name"
    
    # Make the API request with curl and comprehensive error handling
    local http_code=$(curl -s \
        --connect-timeout 10 \
        --max-time 30 \
        --retry 0 \
        --fail-with-body \
        -w "%{http_code}" \
        -o "$output_file" \
        "$api_url" 2>/dev/null)
    
    # Return the HTTP code for evaluation
    echo "$http_code"
}

# Function to validate JSON response
validate_json_response() {
    local output_file="$1"
    local pokemon_name="$2"
    
    # Check if file exists and is not empty
    if [ ! -f "$output_file" ] || [ ! -s "$output_file" ]; then
        return 1
    fi
    
    # If jq is available, validate JSON structure
    if command -v jq &> /dev/null; then
        # Check if it's valid JSON
        if ! jq empty "$output_file" 2>/dev/null; then
            return 1
        fi
        
        # Check if it contains expected Pokemon data structure
        local name_check=$(jq -r '.name' "$output_file" 2>/dev/null)
        local height_check=$(jq -r '.height' "$output_file" 2>/dev/null)
        local weight_check=$(jq -r '.weight' "$output_file" 2>/dev/null)
        
        if [ "$name_check" = "null" ] || [ "$height_check" = "null" ] || [ "$weight_check" = "null" ]; then
            return 1
        fi
        
        # Verify the name matches what we requested (case-insensitive)
        if [ "${name_check,,}" != "${pokemon_name,,}" ]; then
            return 1
        fi
    fi
    
    return 0
}

# Function to get error description based on HTTP code
get_error_description() {
    local http_code="$1"
    
    case "$http_code" in
        "000") echo "Network connection failed" ;;
        "404") echo "Pokemon not found" ;;
        "429") echo "Rate limit exceeded" ;;
        "500") echo "Internal server error" ;;
        "502") echo "Bad gateway" ;;
        "503") echo "Service unavailable" ;;
        "504") echo "Gateway timeout" ;;
        *) echo "HTTP error $http_code" ;;
    esac
}

# Enhanced function to fetch data for a single Pokemon with retry logic
fetch_pokemon_data() {
    local pokemon_name="$1"
    local output_file="$OUTPUT_DIR/${pokemon_name}.json"
    local attempt=1
    
    # Validate Pokemon name format
    if ! validate_pokemon_name "$pokemon_name"; then
        echo "‚ùå Error: Invalid Pokemon name format: $pokemon_name"
        log_error "$pokemon_name" "Invalid Pokemon name format" "0"
        return 1
    fi
    
    echo "Fetching data for $pokemon_name..."
    
    # Retry loop
    while [ $attempt -le $MAX_RETRIES ]; do
        if [ $attempt -gt 1 ]; then
            echo "  üîÑ Retry attempt $attempt for $pokemon_name..."
            sleep $RETRY_DELAY
        fi
        
        # Remove any existing file from previous failed attempts
        [ -f "$output_file" ] && rm "$output_file"
        
        # Make the API request
        local http_code=$(make_single_request "$pokemon_name" "$output_file")
        
        # Check if the request was successful (HTTP 200)
        if [ "$http_code" -eq 200 ]; then
            # Validate the JSON response
            if validate_json_response "$output_file" "$pokemon_name"; then
                echo "Saved data to $output_file ‚úÖ"
                log_success "$pokemon_name" "$attempt"
                return 0
            else
                local error_msg="Invalid or incomplete JSON response"
                echo "  ‚ö†Ô∏è  Attempt $attempt failed: $error_msg"
                log_error "$pokemon_name" "$error_msg" "$attempt"
            fi
        else
            # Get human-readable error description
            local error_desc=$(get_error_description "$http_code")
            echo "  ‚ö†Ô∏è  Attempt $attempt failed: $error_desc"
            log_error "$pokemon_name" "$error_desc" "$attempt"
            
            # Special handling for rate limiting
            if [ "$http_code" -eq 429 ]; then
                echo "  ‚è±Ô∏è  Rate limited, waiting extra time..."
                sleep $((RETRY_DELAY * 2))
            fi
        fi
        
        # Clean up failed file
        [ -f "$output_file" ] && rm "$output_file"
        
        ((attempt++))
    done
    
    # All retries exhausted
    echo "‚ùå Error: Failed to fetch data for $pokemon_name after $MAX_RETRIES attempts"
    log_error "$pokemon_name" "All retry attempts exhausted" "$MAX_RETRIES"
    return 1
}

# Function to display script information
show_info() {
    echo "üöÄ Enhanced Batch Pokemon Data Retrieval Script"
    echo "==============================================="
    echo "This script fetches data for multiple Pokemon with robust error handling"
    echo ""
    echo "Pokemon to fetch:"
    for pokemon in "${POKEMON_LIST[@]}"; do
        echo "  üîπ $pokemon"
    done
    echo ""
    echo "Configuration:"
    echo "  üìÅ Output directory: $OUTPUT_DIR"
    echo "  ‚è±Ô∏è  Request delay: ${REQUEST_DELAY}s"
    echo "  üîÑ Max retries: $MAX_RETRIES"
    echo "  ‚è≥ Retry delay: ${RETRY_DELAY}s"
    echo "  üìù Error log: $ERROR_LOG"
    echo "  üìã Success log: $SUCCESS_LOG"
    echo ""
}

# Function to display detailed summary with retry statistics
show_detailed_summary() {
    local successful_count=0
    local failed_count=0
    
    echo ""
    echo "üìä Detailed Processing Summary"
    echo "============================="
    
    for pokemon in "${POKEMON_LIST[@]}"; do
        local output_file="$OUTPUT_DIR/${pokemon}.json"
        if [ -f "$output_file" ] && [ -s "$output_file" ]; then
            echo "‚úÖ $pokemon - Success"
            ((successful_count++))
            
            # Show retry information from success log
            if [ -f "$SUCCESS_LOG" ]; then
                local retry_info=$(grep "$pokemon" "$SUCCESS_LOG" | tail -1 | grep -o "Attempt [0-9]*")
                if [ -n "$retry_info" ]; then
                    echo "   ‚îî‚îÄ $retry_info"
                fi
            fi
        else
            echo "‚ùå $pokemon - Failed after $MAX_RETRIES attempts"
            ((failed_count++))
            
            # Show last error from error log
            if [ -f "$ERROR_LOG" ]; then
                local last_error=$(grep "$pokemon" "$ERROR_LOG" | tail -1 | cut -d':' -f3-)
                if [ -n "$last_error" ]; then
                    echo "   ‚îî‚îÄ Last error:$last_error"
                fi
            fi
        fi
    done
    
    echo ""
    echo "üìà Final Results:"
    echo "  ‚úÖ Successful: $successful_count"
    echo "  ‚ùå Failed: $failed_count"
    echo "  üìâ Success rate: $(( (successful_count * 100) / (successful_count + failed_count) ))%"
    
    if [ $failed_count -gt 0 ]; then
        echo ""
        echo "‚ö†Ô∏è  For detailed error information, check:"
        echo "   cat $ERROR_LOG"
    fi
    
    if [ $successful_count -gt 0 ]; then
        echo ""
        echo "üí° You can view the data with commands like:"
        echo "   jq . < $OUTPUT_DIR/bulbasaur.json | head -n 30"
        echo "   cat $OUTPUT_DIR/charmander.json"
    fi
    
    echo ""
    echo "üìã Log files created:"
    echo "  üî¥ Errors: $ERROR_LOG"
    echo "  üü¢ Success: $SUCCESS_LOG"
}

# Function to initialize log files
initialize_logs() {
    # Create/clear log files
    > "$ERROR_LOG"
    > "$SUCCESS_LOG"
    
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] Batch processing started" >> "$SUCCESS_LOG"
    echo "[$timestamp] Batch processing started" >> "$ERROR_LOG"
}

# Main execution function
main() {
    show_info
    check_prerequisites
    check_network_connectivity
    setup_output_directory
    initialize_logs
    
    echo "üéØ Starting enhanced batch Pokemon data retrieval..."
    echo ""
    
    local total_pokemon=${#POKEMON_LIST[@]}
    local current_count=0
    
    # Loop through each Pokemon in the list
    for pokemon in "${POKEMON_LIST[@]}"; do
        ((current_count++))
        echo "[$current_count/$total_pokemon] Processing $pokemon"
        
        # Fetch data for current Pokemon with retry logic
        fetch_pokemon_data "$pokemon"
        
        # Add delay between requests (except for the last one)
        if [ $current_count -lt $total_pokemon ]; then
            echo "  ‚è≥ Waiting ${REQUEST_DELAY}s before next request..."
            sleep $REQUEST_DELAY
        fi
        
        echo ""
    done
    
    show_detailed_summary
}

# Run the main function
main "$@"
