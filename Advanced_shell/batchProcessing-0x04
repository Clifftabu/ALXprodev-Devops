#!/bin/bash
# Parallel Data Fetching Script - Task 5
# This script fetches Pokemon data in parallel using background processes
# Handles proper process management and waits for all processes to complete

# Pokemon API base URL
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"

# List of Pokemon to fetch (as specified in requirements)
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Output directory
OUTPUT_DIR="pokemon_data"

# Process tracking
PIDS=()  # Array to store process IDs
TEMP_DIR="/tmp/pokemon_parallel_$$"  # Unique temp directory for this script instance

# Retry configuration
MAX_RETRIES=3
RETRY_DELAY=2

# Log files
ERROR_LOG="parallel_errors.log"
SUCCESS_LOG="parallel_success.log"
PROCESS_LOG="process_status.log"

# Function to log messages with timestamp
log_message() {
    local log_file="$1"
    local message="$2"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $message" >> "$log_file"
}

# Function to log errors
log_error() {
    local pokemon_name="$1"
    local error_message="$2"
    log_message "$ERROR_LOG" "ERROR - Pokemon: $pokemon_name - $error_message"
}

# Function to log success
log_success() {
    local pokemon_name="$1"
    local message="$2"
    log_message "$SUCCESS_LOG" "SUCCESS - Pokemon: $pokemon_name - $message"
}

# Function to log process status
log_process() {
    local message="$1"
    log_message "$PROCESS_LOG" "$message"
}

# Function to fetch a single Pokemon with retry logic
fetch_pokemon() {
    local pokemon_name="$1"
    local process_id="$$"
    local temp_file="$TEMP_DIR/${pokemon_name}_${process_id}.json"
    local attempt=1
    
    log_process "Starting fetch for $pokemon_name (PID: $process_id)"
    
    while [ $attempt -le $MAX_RETRIES ]; do
        log_process "Attempt $attempt for $pokemon_name"
        
        # Use curl with timeout and error handling
        if curl -s --max-time 30 --retry 2 --retry-delay 1 \
           -o "$temp_file" \
           "$API_BASE_URL/$pokemon_name"; then
            
            # Check if the response is valid JSON and not an error
            if jq -e . "$temp_file" >/dev/null 2>&1; then
                # Check if it's a Pokemon response (has 'name' field)
                if jq -e '.name' "$temp_file" >/dev/null 2>&1; then
                    # Move to final location
                    mv "$temp_file" "$OUTPUT_DIR/${pokemon_name}.json"
                    log_success "$pokemon_name" "Successfully fetched and saved"
                    log_process "Completed fetch for $pokemon_name (PID: $process_id)"
                    return 0
                else
                    log_error "$pokemon_name" "Invalid Pokemon data received (attempt $attempt)"
                fi
            else
                log_error "$pokemon_name" "Invalid JSON response (attempt $attempt)"
            fi
        else
            log_error "$pokemon_name" "curl request failed (attempt $attempt)"
        fi
        
        # Clean up failed attempt
        [ -f "$temp_file" ] && rm "$temp_file"
        
        if [ $attempt -lt $MAX_RETRIES ]; then
            log_process "Retrying $pokemon_name in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
        fi
        
        ((attempt++))
    done
    
    log_error "$pokemon_name" "Failed after $MAX_RETRIES attempts"
    log_process "Failed to fetch $pokemon_name (PID: $process_id)"
    return 1
}

# Function to cleanup on script exit using jobs
cleanup() {
    log_process "Cleanup initiated"
    
    # Show current jobs before cleanup
    if jobs -p | grep -q .; then
        log_process "Active background jobs found: $(jobs -p | wc -l)"
        jobs -l
        
        # Kill any remaining background processes using jobs
        for job_pid in $(jobs -p); do
            if kill -0 "$job_pid" 2>/dev/null; then
                log_process "Terminating job process $job_pid"
                kill "$job_pid" 2>/dev/null
            fi
        done
    fi
    
    # Also kill PIDs from our tracking array
    for pid in "${PIDS[@]}"; do
        if kill -0 "$pid" 2>/dev/null; then
            log_process "Terminating tracked process $pid"
            kill "$pid" 2>/dev/null
        fi
    done
    
    # Wait for jobs to complete
    log_process "Waiting for remaining jobs to finish..."
    while jobs -r | grep -q .; do
        sleep 0.5
    done
    
    # Clean up temporary directory
    if [ -d "$TEMP_DIR" ]; then
        rm -rf "$TEMP_DIR"
        log_process "Cleaned up temporary directory: $TEMP_DIR"
    fi
    
    log_process "Cleanup completed. Final job count: $(jobs | wc -l)"
}

# Function to wait for all background processes using jobs
wait_for_processes() {
    local failed_count=0
    local success_count=0
    
    log_process "Waiting for ${#PIDS[@]} background processes to complete..."
    
    # Use jobs command to monitor background processes
    while jobs -r | grep -q .; do
        log_process "Active jobs: $(jobs -r | wc -l)"
        jobs -l  # List jobs with PIDs
        sleep 1
    done
    
    # Wait for individual PIDs and check exit status
    for pid in "${PIDS[@]}"; do
        if wait "$pid"; then
            ((success_count++))
            log_process "Process $pid completed successfully"
        else
            ((failed_count++))
            log_process "Process $pid failed"
        fi
    done
    
    log_process "Process completion summary: $success_count successful, $failed_count failed"
    log_process "All background jobs completed: $(jobs | wc -l) remaining"
    
    return $failed_count
}

# Function to display progress
show_progress() {
    local total=${#POKEMON_LIST[@]}
    local completed=0
    
    while [ $completed -lt $total ]; do
        sleep 2
        completed=0
        
        # Count completed processes
        for pid in "${PIDS[@]}"; do
            if ! kill -0 "$pid" 2>/dev/null; then
                ((completed++))
            fi
        done
        
        echo "Progress: $completed/$total Pokemon fetched"
    done
}

# Main execution function
main() {
    echo "Starting Parallel Pokemon Data Fetching..."
    echo "Target Pokemon: ${POKEMON_LIST[*]}"
    echo "================================================"
    
    # Setup trap for cleanup
    trap cleanup EXIT INT TERM
    
    # Initialize log files
    > "$ERROR_LOG"
    > "$SUCCESS_LOG"
    > "$PROCESS_LOG"
    
    log_process "Script started with PID $$"
    
    # Create output directory
    if ! mkdir -p "$OUTPUT_DIR"; then
        echo "Error: Cannot create output directory '$OUTPUT_DIR'"
        exit 1
    fi
    
    # Create temporary directory
    if ! mkdir -p "$TEMP_DIR"; then
        echo "Error: Cannot create temporary directory '$TEMP_DIR'"
        exit 1
    fi
    
    log_process "Created directories: $OUTPUT_DIR, $TEMP_DIR"
    
    # Check for required tools
    for tool in curl jq; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            echo "Error: Required tool '$tool' is not installed"
            exit 1
        fi
    done
    
    echo "Starting parallel fetch processes..."
    
    # Start background processes for each Pokemon
    for pokemon in "${POKEMON_LIST[@]}"; do
        echo "Starting fetch for: $pokemon"
        fetch_pokemon "$pokemon" &
        pid=$!
        PIDS+=("$pid")
        log_process "Started background process for $pokemon (PID: $pid)"
        
        # Small delay to prevent overwhelming the API
        sleep 0.1
    done
    
    echo "All background processes started. PIDs: ${PIDS[*]}"
    
    # Display current jobs status
    echo "Current background jobs:"
    jobs -l
    
    # Show jobs running status
    echo "Number of running jobs: $(jobs -r | wc -l)"
    
    # Show progress in background
    show_progress &
    progress_pid=$!
    
    # Wait for all processes to complete
    echo "Waiting for all processes to complete..."
    echo "Monitoring jobs status..."
    wait_for_processes
    exit_code=$?
    
    # Final jobs check
    echo "Final jobs status after completion:"
    jobs -l
    echo "Remaining jobs count: $(jobs | wc -l)"
    
    # Stop progress display
    kill "$progress_pid" 2>/dev/null
    wait "$progress_pid" 2>/dev/null
    
    echo "================================================"
    echo "Parallel fetch completed!"
    
    # Display results
    success_count=$(grep -c "SUCCESS" "$SUCCESS_LOG" 2>/dev/null || echo "0")
    error_count=$(grep -c "ERROR" "$ERROR_LOG" 2>/dev/null || echo "0")
    
    echo "Results Summary:"
    echo "- Successful fetches: $success_count"
    echo "- Failed fetches: $error_count"
    echo "- Output directory: $OUTPUT_DIR"
    
    # List fetched files
    if [ -d "$OUTPUT_DIR" ] && [ "$(ls -A "$OUTPUT_DIR" 2>/dev/null)" ]; then
        echo "- Fetched files:"
        ls -la "$OUTPUT_DIR"/*.json 2>/dev/null | while read -r line; do
            echo "  $line"
        done
    fi
    
    echo "- Log files: $SUCCESS_LOG, $ERROR_LOG, $PROCESS_LOG"
    
    # Display any errors
    if [ -s "$ERROR_LOG" ]; then
        echo ""
        echo "Errors encountered:"
        tail -10 "$ERROR_LOG"
    fi
    
    log_process "Script completed with exit code $exit_code"
    
    return $exit_code
}

# Execute main function
main "$@"
